#!/usr/bin/env bash
# ihai - I have an idea! Create Jira ticket
#
# Note: If the script doesn't run: the here-docs expect each line to
# start with a tab. Your editor might have converted them to spaces.

tmpfile=$(mktemp)
trap "rm -f $tmpfile" 0

ME=$(basename $0)
JIRA_CONFIG=$HOME/.jira.d/config.yml
IHAI_LABEL=${IHAI_LABEL:-'ihai'}

usage() {
  cat<<-EOF
	$ME - I have an idea! Create Jira ticket.
	
	usage: $ME [options] <Jira ticket title>
	Ticket description taken from STDIN
	
	Options:
	  -h    This help message
	  -l    List all ihai tickets
	  -L    Add additional labels (quoted space separated)
	  -n    Do not edit the ticket description in your EDITOR
	
	EOF
  exit $1
}

list_tickets_then_exit() {
  jira list -q"labels in ($IHAI_LABEL) and status not in (Done) order by created DESC" -t table ;
  exit $?
}

# --------------------------------------------------
# Sanity checks
if ! which jira > /dev/null 2>&1 ; then
  echo "Can't find jira in PATH."
  exit 1
fi
if ! [[ -e $JIRA_CONFIG ]] ; then
  echo "go-jira configuration not found."
  exit $?
fi


# --------------------------------------------------
# Parse arguments
while getopts 'L:hln' tag ; do
  case $tag in
    l) list_tickets_then_exit     ;; # list ihai tickets in Jira
    n) no_edit='--noedit'         ;; # run without opening editor
    L) ADDITIONAL_LABEL="$OPTARG" ;; # add additional labels
    h) usage 0                    ;;
   \?) usage 1                    ;;
  esac
done


# --------------------------------------------------
# Get ticket summary
shift $(( $OPTIND - 1 ))
summary="$*"
if [[ -z "$summary" ]] ; then
  $0 -h
  echo "--------------------"
  echo "Missing ticket title."
  exit 1;
fi


# --------------------------------------------------
# Get description
echo "Please enter a description, and exit with ctrl-d."
description=$(cat)

echo -n ">> Creating ticket: "
jira create $no_edit                       \
     --issuetype=Task                      \
     --override="summary:$summary"         \
     --override="description:$description" > $tmpfile 2>&1

read -r status key url < $tmpfile
echo $status
if [[ "$?" -ne 0 ]] ; then
  cat $tmpfile
  exit 1
fi

# --------------------------------------------------
# Label ticket
LABEL="$IHAI_LABEL $ADDITIONAL_LABEL"
echo -n ">> Labelling ticket as '$LABEL': "
issue=$(jira list --limit=1 --sort='issue desc' | cut -d: -f1)
jira labels set $issue $LABEL > $tmpfile 2>&1
echo $status


# --------------------------------------------------
# Print branch-name for easy copy-pasta
stripped_summary=$(echo $summary | tr -dc '[:alnum:]' | tr ' ' '-')
git_checkout=$(echo "git checkout -b ${key}-${stripped_summary}" | tr '[:upper:]' '[:lower:]')
echo ">> git branch name suggestion"
echo "   $git_checkout"

if which pbcopy > /dev/null; then
  echo $git_checkout | pbcopy
fi

exit 0
